#!/usr/bin/env ts-node

import { initializeDatabase, checkDatabaseHealth } from '../lib/db/index';

async function main() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await initializeDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const health = await checkDatabaseHealth();
    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${health.isHealthy ? '‚úÖ –ó–¥–æ—Ä–æ–≤–∞—è' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);
    console.log(`   –¢–∞–±–ª–∏—Ü—ã: ${health.tables.join(', ')}`);
    
    if (!health.isHealthy && health.error) {
      console.error(`   –û—à–∏–±–∫–∞: ${health.error}`);
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

main();

import { NextRequest } from 'next/server';
import OpenAI from 'openai';
import { Course, CourseProgress } from '@/lib/types';
import * as fs from 'fs';
import * as path from 'path';

// –ß–∏—Ç–∞–µ–º –°–æ–∫—Ä–∞—Ç–æ–≤—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
let SOCRATIC_PROMPT = '';
try {
  const promptPath = path.join(process.cwd(), 'lib', 'templates', 'socratic_prompt.txt');
  SOCRATIC_PROMPT = fs.readFileSync(promptPath, 'utf-8');
} catch (error) {
  console.error('Failed to read Socratic prompt:', error);
  SOCRATIC_PROMPT = `You are a Socratic tutor. Your role is to guide the learner to understanding only through questions. IMPORTANT: Always respond in Russian.`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫—É—Ä—Å–∞
function getCoursePrompt(course: Course, progress: CourseProgress): string {
  const currentModule = course.modules[progress.currentModuleIndex];
  const currentLesson = currentModule?.lessons[progress.currentLessonIndex];
  
  if (!currentModule || !currentLesson) {
    return SOCRATIC_PROMPT;
  }
  
  return `${SOCRATIC_PROMPT}

You are currently teaching a course: "${course.title}"
Course level: ${course.level}
Current module: "${currentModule.title}" (${progress.currentModuleIndex + 1} of ${course.modules.length})
Current lesson: "${currentLesson.title}" (${progress.currentLessonIndex + 1} of ${currentModule.lessons.length})

Lesson type: ${currentLesson.type}
Lesson content context: ${currentLesson.content}
Learning objectives for this module:
${currentModule.learning_objectives.map((obj, i) => `${i + 1}. ${obj}`).join('\n')}

Prompts to use with the learner:
${currentLesson.prompts_for_user.map((prompt, i) => `${i + 1}. ${prompt}`).join('\n')}

Expected outcome: ${currentLesson.expected_outcome}

${currentLesson.hints ? `Available hints (use sparingly, only if learner is stuck):
${currentLesson.hints.map((hint, i) => `${i + 1}. ${hint}`).join('\n')}` : ''}

Guide the learner through this lesson using the Socratic method. Focus on the current lesson objectives while maintaining the overall course progression.

IMPORTANT: Always respond in Russian.`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞
function checkForCourseCreationRequest(message: string): boolean {
  const courseKeywords = [
    '—Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å',
    '—Å–æ–∑–¥–∞–π –∫—É—Ä—Å',
    '—Å–¥–µ–ª–∞—Ç—å –∫—É—Ä—Å',
    '—Å–¥–µ–ª–∞–π –∫—É—Ä—Å',
    '–Ω–æ–≤—ã–π –∫—É—Ä—Å',
    '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä—Å',
    '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π –∫—É—Ä—Å',
    '–æ–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å',
    '—É—á–µ–±–Ω—ã–π –∫—É—Ä—Å',
    '–∫—É—Ä—Å –ø–æ',
    '–∫—É—Ä—Å –¥–ª—è',
    '—Ö–æ—á—É –∫—É—Ä—Å',
    '–Ω—É–∂–µ–Ω –∫—É—Ä—Å',
    '—Å–æ—Å—Ç–∞–≤—å –∫—É—Ä—Å',
    '—Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫—É—Ä—Å',
    '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—É—Ä—Å',
    '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å'
  ];
  
  const lowerMessage = message.toLowerCase();
  return courseKeywords.some(keyword => lowerMessage.includes(keyword));
}

// –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞
const COURSE_CREATION_THOUGHTS_PROMPT = `You are an expert educational course designer. When creating a course, you should think out loud about the process.

IMPORTANT: Always respond in Russian.

First, share your thoughts about:
1. What topic the user wants to learn
2. What level might be appropriate
3. What key modules would be valuable
4. How to balance theory and practice

Format your thoughts as:
<THOUGHT>
[Your thinking process in Russian]
</THOUGHT>

After sharing 2-3 thoughts about the course structure, then generate the complete course.`;

/**
 * POST /api/chat
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI —á–µ—Ä–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥
 */
export async function POST(request: NextRequest) {
  // –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫ –¥–ª—è Server-Sent Events
  const encoder = new TextEncoder();
  const stream = new TransformStream();
  const writer = stream.writable.getWriter();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const sendEvent = async (event: string, data: any) => {
    const message = `event: ${event}\ndata: ${JSON.stringify(data)}\n\n`;
    await writer.write(encoder.encode(message));
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  (async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
      if (!process.env.OPENAI_API_KEY) {
        await sendEvent('error', { 
          error: 'OpenAI API key is not configured',
          statusCode: 503 
        });
        await writer.close();
        return;
      }
      
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const body = await request.json();
      const { messages, context } = body;
      
      if (!messages || !Array.isArray(messages)) {
        await sendEvent('error', { 
          error: 'Invalid request: messages array is required',
          statusCode: 400 
        });
        await writer.close();
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞
      const lastMessage = messages[messages.length - 1];
      const isCreatingCourse = lastMessage && lastMessage.role === 'user' && checkForCourseCreationRequest(lastMessage.content);
      
      let systemPrompt = SOCRATIC_PROMPT;
      let useStreaming = true;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∫—É—Ä—Å—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      if (context && context.type === 'course' && context.course && context.progress) {
        systemPrompt = getCoursePrompt(context.course, context.progress);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏
      if (isCreatingCourse) {
        // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –∫—É—Ä—Å–∞
        const templatePath = path.join(process.cwd(), 'lib', 'templates', 'course_template.json');
        const courseTemplate = fs.readFileSync(templatePath, 'utf-8');
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        await sendEvent('thought', { 
          content: 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞...' 
        });
        
        systemPrompt = `${COURSE_CREATION_THOUGHTS_PROMPT}

When the user requests to create a course:
1. First share 2-3 thoughts about the course design
2. Then create a complete course structure

Extract from their request:
- The topic they want to learn
- Implied skill level (if not specified, assume Beginner)
- Any specific areas they mentioned

Then create a course following this template:

${courseTemplate}

Fill in the template with:
- Relevant, practical content based on the topic
- Clear learning objectives
- Mix of theory and practice lessons (focus on practice)
- Progressive difficulty
- Practical exercises and reflection questions

After your thoughts, generate the course and present it in this format:

–Ø —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å –∫—É—Ä—Å "[–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞]". –í–æ—Ç –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:

[Brief description of what the course covers]

Then output the complete course structure wrapped in:
<COURSE_JSON>
{your generated course JSON here}
</COURSE_JSON>`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const messagesWithSystem = [
        { role: 'system', content: systemPrompt },
        ...messages
      ];
      
      // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI
      const stream = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: messagesWithSystem as any,
        temperature: 0.7,
        max_tokens: 2000,
        stream: true,
      });
      
      let fullResponse = '';
      let currentThought = '';
      let inThought = false;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º
      for await (const chunk of stream) {
        const content = chunk.choices[0]?.delta?.content || '';
        fullResponse += content;
        
        // –ï—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫—É—Ä—Å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        if (isCreatingCourse) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
          if (content.includes('<THOUGHT>')) {
            inThought = true;
            currentThought = content.split('<THOUGHT>')[1] || '';
          } else if (inThought && content.includes('</THOUGHT>')) {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
            currentThought += content.split('</THOUGHT>')[0];
            await sendEvent('thought', { content: currentThought.trim() });
            inThought = false;
            currentThought = '';
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            const remaining = content.split('</THOUGHT>')[1];
            if (remaining) {
              await sendEvent('content', { content: remaining });
            }
          } else if (inThought) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
            currentThought += content;
          } else {
            // –û–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await sendEvent('content', { content });
          }
        } else {
          // –û–±—ã—á–Ω—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥ –¥–ª—è –Ω–µ-–∫—É—Ä—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          await sendEvent('content', { content });
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç JSON –∫—É—Ä—Å–∞
      const courseJsonMatch = fullResponse.match(/<COURSE_JSON>([\s\S]*?)<\/COURSE_JSON>/);
      let courseData = null;
      
      if (courseJsonMatch) {
        try {
          const courseJson = courseJsonMatch[1].trim();
          const parsedData = JSON.parse(courseJson);
          courseData = parsedData.course;
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞
          await sendEvent('course', { course: courseData });
        } catch (error) {
          console.error('Failed to parse course JSON:', error);
          await sendEvent('error', { error: 'Failed to parse course structure' });
        }
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º
      await sendEvent('done', { 
        reply: fullResponse.replace(/<COURSE_JSON>[\s\S]*?<\/COURSE_JSON>/, '').replace(/<THOUGHT>[\s\S]*?<\/THOUGHT>/g, '').trim()
      });
      
    } catch (error) {
      console.error('Chat API error:', error);
      
      if (error instanceof Error) {
        await sendEvent('error', { 
          error: error.message,
          statusCode: 500 
        });
      } else {
        await sendEvent('error', { 
          error: 'Internal server error',
          statusCode: 500 
        });
      }
    } finally {
      await writer.close();
    }
  })();
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è SSE
  return new Response(stream.readable, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
    },
  });
}
'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Course, UserProgress, Insight } from '@/lib/types';

export default function ProgressPage() {
  const params = useParams();
  const router = useRouter();
  const courseId = params.courseId as string;
  
  const [course, setCourse] = useState<Course | null>(null);
  const [progress, setProgress] = useState<UserProgress | null>(null);
  const [insights, setInsights] = useState<Insight[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadProgress();
  }, [courseId]);

  const loadProgress = async () => {
    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–∞
      const courseResponse = await fetch(`/api/courses/${courseId}`);
      if (!courseResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞');
      const { data: courseData } = await courseResponse.json();
      setCourse(courseData);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressResponse = await fetch(`/api/courses/${courseId}/progress`);
      if (!progressResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
      const { data: progressData } = await progressResponse.json();
      setProgress(progressData);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å–∞–π—Ç–æ–≤
      const insightsResponse = await fetch(`/api/courses/${courseId}/insights`);
      if (!insightsResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤');
      const { data: insightsData } = await insightsResponse.json();
      setInsights(insightsData);
    } catch (error) {
      console.error('Error loading progress:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
      router.push('/learn');
    } finally {
      setLoading(false);
    }
  };

  const continuelearning = async () => {
    try {
      const response = await fetch(`/api/courses/${courseId}/continue`, {
        method: 'POST'
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è');
      
      const { data } = await response.json();
      router.push(`/learn/session/${data.sessionId}`);
    } catch (error) {
      console.error('Error continuing course:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ');
    }
  };

  const repeatSession = async () => {
    try {
      const response = await fetch(`/api/courses/${courseId}/repeat`, {
        method: 'POST'
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –∫—É—Ä—Å–∞');
      
      const { data } = await response.json();
      router.push(`/learn/session/${data.sessionId}`);
    } catch (error) {
      console.error('Error repeating course:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫—É—Ä—Å');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!course || !progress) return null;

  const completedPercentage = progress.progressPercentage;
  const isCompleted = completedPercentage === 100;

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-light text-gray-900 mb-2">
              {isCompleted ? 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!' : '–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'}
            </h1>
            <p className="text-gray-600">
              {course.config.topic}
            </p>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="mb-8">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
              <span>{Math.round(completedPercentage)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div
                className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-500"
                style={{ width: `${completedPercentage}%` }}
              />
            </div>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-3 gap-6 mb-8">
            <div className="text-center">
              <div className="text-3xl font-light text-gray-900">
                {progress.completedBlocks.length}
              </div>
              <div className="text-sm text-gray-600">–ü—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-light text-gray-900">
                {progress.totalInsights}
              </div>
              <div className="text-sm text-gray-600">–ò–Ω—Å–∞–π—Ç–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-light text-gray-900">
                {course.blocks.length}
              </div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤</div>
            </div>
          </div>

          {/* –ë–ª–æ–∫–∏ –∫—É—Ä—Å–∞ */}
          <div className="mb-8">
            <h3 className="text-lg font-medium text-gray-900 mb-4">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞</h3>
            <div className="space-y-2">
              {course.blocks.map((block) => {
                const isCompleted = progress.completedBlocks.includes(block.id);
                return (
                  <div
                    key={block.id}
                    className={`p-3 rounded-lg border ${
                      isCompleted
                        ? 'bg-green-50 border-green-200'
                        : 'bg-gray-50 border-gray-200'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className="text-lg">
                          {isCompleted ? '‚úÖ' : '‚≠ï'}
                        </span>
                        <span className={isCompleted ? 'text-green-700' : 'text-gray-700'}>
                          {block.title}
                        </span>
                      </div>
                      <span className="text-sm text-gray-500">
                        {block.type === 'introduction' && '–í–≤–µ–¥–µ–Ω–∏–µ'}
                        {block.type === 'learning' && '–û–±—É—á–µ–Ω–∏–µ'}
                        {block.type === 'practice' && '–ü—Ä–∞–∫—Ç–∏–∫–∞'}
                        {block.type === 'reflection' && '–†–µ—Ñ–ª–µ–∫—Å–∏—è'}
                      </span>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Å–∞–π—Ç—ã */}
          {insights.length > 0 && (
            <div className="mb-8">
              <h3 className="text-lg font-medium text-gray-900 mb-4">–¢–≤–æ–∏ –∏–Ω—Å–∞–π—Ç—ã</h3>
              <div className="space-y-3 max-h-64 overflow-y-auto">
                {insights.slice(0, 5).map((insight) => (
                  <div key={insight.id} className="p-4 bg-purple-50 rounded-lg">
                    <div className="flex items-start space-x-2">
                      <span className="text-purple-600">
                        {insight.type === 'new_understanding' && 'üí°'}
                        {insight.type === 'conclusion' && 'üìù'}
                        {insight.type === 'difficulty' && 'ü§î'}
                      </span>
                      <div className="flex-1">
                        <p className="text-sm text-gray-700">{insight.content}</p>
                        <p className="text-xs text-gray-500 mt-1">
                          {new Date(insight.createdAt).toLocaleDateString('ru-RU')}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex flex-col sm:flex-row gap-4">
            {!isCompleted && (
              <button
                onClick={continuelearning}
                className="flex-1 py-3 px-6 bg-blue-500 text-white font-medium rounded-lg hover:bg-blue-600 transition-colors"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
              </button>
            )}
            <button
              onClick={repeatSession}
              className="flex-1 py-3 px-6 bg-white text-gray-700 font-medium rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors"
            >
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫—É—Ä—Å
            </button>
            <button
              onClick={() => router.push('/learn')}
              className="flex-1 py-3 px-6 bg-white text-gray-700 font-medium rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors"
            >
              –ù–æ–≤—ã–π –∫—É—Ä—Å
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}